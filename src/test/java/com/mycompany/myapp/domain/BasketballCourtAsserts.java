package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BasketballCourtAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBasketballCourtAllPropertiesEquals(BasketballCourt expected, BasketballCourt actual) {
        assertBasketballCourtAutoGeneratedPropertiesEquals(expected, actual);
        assertBasketballCourtAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBasketballCourtAllUpdatablePropertiesEquals(BasketballCourt expected, BasketballCourt actual) {
        assertBasketballCourtUpdatableFieldsEquals(expected, actual);
        assertBasketballCourtUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBasketballCourtAutoGeneratedPropertiesEquals(BasketballCourt expected, BasketballCourt actual) {
        assertThat(expected)
            .as("Verify BasketballCourt auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBasketballCourtUpdatableFieldsEquals(BasketballCourt expected, BasketballCourt actual) {
        assertThat(expected)
            .as("Verify BasketballCourt relevant properties")
            .satisfies(e -> assertThat(e.getCourtName()).as("check courtName").isEqualTo(actual.getCourtName()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getZipCode()).as("check zipCode").isEqualTo(actual.getZipCode()))
            .satisfies(e -> assertThat(e.getStreetAddress()).as("check streetAddress").isEqualTo(actual.getStreetAddress()))
            .satisfies(e -> assertThat(e.getLongitude()).as("check longitude").isEqualTo(actual.getLongitude()))
            .satisfies(e -> assertThat(e.getLatitude()).as("check latitude").isEqualTo(actual.getLatitude()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBasketballCourtUpdatableRelationshipsEquals(BasketballCourt expected, BasketballCourt actual) {
        assertThat(expected)
            .as("Verify BasketballCourt relationships")
            .satisfies(e -> assertThat(e.getCourtType()).as("check courtType").isEqualTo(actual.getCourtType()))
            .satisfies(e -> assertThat(e.getUserProfiles()).as("check userProfiles").isEqualTo(actual.getUserProfiles()));
    }
}
